import matplotlib.pyplot as plt
import numpy as np
import requests_cache
from matplotlib import pyplot
from mpl_toolkits.basemap import Basemap
from pytz import timezone
from skyfield import api, almanac

ts = api.load.timescale()
load = api.Loader('/var/data')
s = requests_cache.CachedSession('tzapicache')
e = load('de430t.bsp')


def equilux(lat, lon, tzstr='America/Chicago', year=2022, years=1):
    ''' find the dates of the equinoxes and equiluxes
    lat: latitude of observation
    lon: longitude of observation
    year: duh
    tzstr: timezone as in America/New_York
    '''
    tz = timezone(tzstr)
    lat = float(lat)
    lon = float(lon)

    t0 = ts.utc(year, 1, 1)
    t1 = ts.utc(year, 12, 31)
    t, y = almanac.find_discrete(t0, t1, almanac.seasons(e))

    results = {}
    for yi, ti in zip(y, t):  # iterate over solstices and equinoxes
        if 'Equinox' not in almanac.SEASON_EVENTS[yi]:
            continue  # we only care about equinoxes here
        dt = ti.utc_datetime()
        results[almanac.SEASON_EVENTS[yi]], _ = ti.astimezone_and_leap_second(tz)
        bluffton = api.Topos(lat, lon)
        t0 = ts.utc(dt.year, dt.month, dt.day - 7)
        t1 = ts.utc(dt.year, dt.month, dt.day + 7)
        # find sunrise and set time over 2 week span centered on equinox
        t2, y2 = almanac.find_discrete(t0, t1, almanac.sunrise_sunset(e, bluffton))
        prev = None
        dates = []
        delta = []
        sunlight = []
        for t2i, y2i in zip(t2, y2):
            dt2, _ = t2i.astimezone_and_leap_second(tz)
            hrs = dt2.hour + dt2.minute / 60.0 + dt2.second / 3600.0
            if y2i:  # rise
                prev = hrs
            elif prev is not None:  # set
                dates.append(dt2)
                delta.append(abs(hrs - prev - 12.0))
                sunlight.append(hrs - prev)
        idx = delta.index(min(delta))
        results[almanac.SEASON_EVENTS[yi]], _ = ti.astimezone_and_leap_second(tz)

        hrs = int(sunlight[idx])
        rem = (sunlight[idx] - hrs) * 60.0
        mins = int(rem)
        secs = (rem - mins) * 60.0

        # record equinox and equilux dates and durations
        results[almanac.SEASON_EVENTS[yi].replace('nox', 'lux')] = dates[idx]
        results[f"{almanac.SEASON_EVENTS[yi].replace('nox', 'lux')} time"] = f'{hrs} hrs {mins} min {secs:.1f} sec'
        results[f"{almanac.SEASON_EVENTS[yi].replace('nox', 'lux')} hours"] = sunlight[idx]

    return results


def find_coordinates_where_date_shifts(step=1, upper_lat=50):
    result = {}
    prev = None
    # for lat in np.arange(50, 22, step*-1):
    print('      ', end='')
    for lon in np.arange(-124, -66, step):
        print(f"{str(int(lon))[-2:]}", end=' ')
    print()

    for lat in np.arange(upper_lat, 22, step * -1):
        print(f"{lat:5}", end=' ')
        for lon in np.arange(-124, -66, step):
            data = equilux(lat, lon, year=2022)
            date = data['Vernal Equilux'].day
            if prev is not None and prev != date:
                if prev not in result.keys():
                    result[str(prev)] = []
                # print((lat, lon, prev, date))
                result[str(prev)].append((lon, lat))
                print(date, end='-', flush=True)
            else:
                print(date, end=' ', flush=True)
            prev = date
        print()
    return result


def draw_map(transitionpoints, resolution='i'):
    m = Basemap(llcrnrlon=-119, llcrnrlat=22, urcrnrlon=-64, urcrnrlat=49,
                projection='lcc', lat_1=33, lat_2=45, lon_0=-95,
                area_thresh=10000., resolution=resolution)

    fig = pyplot.gcf()
    fig.set_size_inches(16.0, 9.0)

    for color, data in transitionpoints.items():
        prev = None
        for point in data:
            if prev is not None:
                m.drawgreatcircle(prev[0], prev[1], point[0], point[1], color=color, linewidth=4, del_s=50)
            prev = point

    m.drawcoastlines(color='dimgrey')
    m.drawcountries(color='dimgrey')
    m.fillcontinents(lake_color='white')
    m.drawstates(color='darkgrey')

    # plt.show()
    plt.savefig('equilux.png', transparent=True, dpi=300)


if __name__ == '__main__':
    transitionpoints = find_coordinates_where_date_shifts(step=.25, upper_lat=50)

    draw_map(transitionpoints)
